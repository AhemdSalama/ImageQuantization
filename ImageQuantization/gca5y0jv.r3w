using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using System.Collections.Generic;
using System.Diagnostics;

namespace ImageQuantization
{
    public partial class MainForm : Form
    {
        public MainForm()
        {
            InitializeComponent();
        }
        public struct rgbPixel
        {
            public int red, green, blue;
            public rgbPixel(int red , int green , int blue)
            {
                this.red = red;
                this.green = green;
                this.blue = blue;
            }
        }

        //***************************************************************
        // DATA DECLERATION 
        //***************************************************************
        RGBPixel[,] ImageMatrix;
        SortedSet<int> uniqeColors = new SortedSet<int>();
        List<Edge> edges = new List<Edge>();
        List<RGBPixel> ucolors = new List<RGBPixel>();
        HashSet<RGBPixel> RGBHash = new HashSet<RGBPixel>();
        static int V; 
        int height;
        int width;

        //**************************************************************
        public static rgbPixel IntToRGB (int value)
        {
            var red = (value >> 0) & 255;
            var green = (value >> 8) & 255;
            var blue = (value >>16) & 255 ;
            return new rgbPixel(red, green, blue);

        }
        public int RGBToInt (int r , int g , int b)
        {
            return (r << 0) | (g << 8) | (b << 16);
        }

        private void btnOpen_Click(object sender, EventArgs e)
        {
            OpenFileDialog openFileDialog1 = new OpenFileDialog();
            if (openFileDialog1.ShowDialog() == DialogResult.OK)
            {
                //Open the browsed image and display it
                string OpenedFilePath = openFileDialog1.FileName;
                ImageMatrix = ImageOperations.OpenImage(OpenedFilePath);
                ImageOperations.DisplayImage(ImageMatrix, pictureBox1);
            }
            txtWidth.Text = ImageOperations.GetWidth(ImageMatrix).ToString();
            txtHeight.Text = ImageOperations.GetHeight(ImageMatrix).ToString();
        }

        private void btnGaussSmooth_Click(object sender, EventArgs e)
        {
            double sigma = double.Parse(txtGaussSigma.Text);
            int maskSize = (int)nudMaskSize.Value ;
            ImageMatrix = ImageOperations.GaussianFilter1D(ImageMatrix, maskSize, sigma);
            ImageOperations.DisplayImage(ImageMatrix, pictureBox2);
        }





        // Return the function with the smallest cost
        static int minKey (int[] key, bool []mstSet)
        {
            int min = int.MaxValue, min_index = -1;
            for (int v = 0 ; v < V ; v++)
            {
                if(mstSet[v] == false && key[v]<min)
                {
                    min = key[v];
                    min_index = v;
                }
            }
            return min_index;
        }


        private void btnQ_Click(object sender, EventArgs e)
        {

            // STEP[1] Put Uniqe Colors in set "uniqeColoes"

            height = ImageOperations.GetHeight(ImageMatrix);
            width = ImageOperations.GetWidth(ImageMatrix);

            //TIME : O(H*W)
            //SPACE : O(D^2)
            
            for (int i = 0; i < height; i++)
            {
                for (int j = 0; j < width; j++)
                {
                    RGBHash.Add(ImageMatrix[i, j]);
                    int value = RGBToInt(ImageMatrix[i, j].red, ImageMatrix[i, j].green, ImageMatrix[i, j].blue);
                    uniqeColors.Add(value);
                }
            }


            //TIME: Exact SIZE OF HASHSET
            foreach (var c in uniqeColors)
            {
                rgbPixel rgb = IntToRGB(c);
                RGBPixel rgbcolor = new RGBPixel();
                rgbcolor.red = (byte)(rgb.red);
                rgbcolor.green = (byte)(rgb.green);
                rgbcolor.blue = (byte)(rgb.blue);

                ucolors.Add(rgbcolor);
            }



            // STEP[2] Get Distance between each color 


            V = uniqeColors.Count;
            // Key values used to pick 
            // minimum weight edge in cut 
            int[] key = new int[V];        // cost of vertices

            // Array to store constructed MST 
            int[] parent = new int[V];     // parents

            // To represent set of vertices 
            // not yet included in MST 
            bool[] mstSet = new bool[V];   // visited verticies
            
            int cost = 0;
            double sum = 0;
            int dred, dgreen, dblue; // contain deffrence 
            int size = ucolors.Count;
            int min_cost = int.MaxValue;
            int min_Ind = -1;
            //TIME O(SIZE^2)


            // Initialize all keys 
            // as INFINITE 
            for (int i = 0; i < V; i ++ )
            {
                key[i] = int.MaxValue;
                parent[i] = -1;
            }



            // Always include first 1st vertex in MST. 
            // Make key 0 so that this vertex is 
            // picked as first vertex 
            // First node is always root of MST 
            key[0] = 0;
            parent[0] = -1;


            for (int i = 0; i < size; i++)
            {
                // Pick thd minimum key vertex 
                // from the set of vertices 
                // not yet included in MST 
                int u = minKey(key, mstSet);

                // Add the picked vertex 
                // to the MST Set
                mstSet[u] = true;

                //To store cost of all edges edges coneected 
                //To the vertive I Picked
                //Fill It Everytime 
                Edge edge;

                //Loop To Get the Minmum Cost for edge connedted to the picked V
                for (int j = i + 1; j < size; j++)
                {
                    dred = ucolors[i].red - ucolors[j].red;
                    dgreen = ucolors[i].green - ucolors[j].green;
                    dblue = ucolors[i].blue - ucolors[j].blue;
                    sum = (dred * dred) + (dgreen * dgreen) + (dblue * dblue);
                    cost = (int)Math.Sqrt(sum);
                    edge = new Edge(i, j, cost);

                    edges.Add(edge);

                    // graph[u][v] is non zero only 
                    // for adjacent vertices of m 
                    // mstSet[v] is false for vertices 
                    // not yet included in MST Update 
                    // the key only if graph[u][v] is 
                    // smaller than key[v] 
                    if (mstSet[j]== false && cost < key[j])
                    {
                        parent[j] = u;
                        key[j] = cost;
                    }
                }
                
            }
            
            int MSTSum = 0;
            foreach (int x in key)
                MSTSum += x;

            

        }

       
       
    }
}